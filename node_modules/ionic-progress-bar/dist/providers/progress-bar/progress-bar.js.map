{"version":3,"file":"progress-bar.js","sourceRoot":"","sources":["../../../src/providers/progress-bar/progress-bar.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,eAAe,EAAS,MAAM,EAAE,MAAM,eAAe,CAAC;AAC/D,OAAO,EAAE,0BAA0B,EAAE,MAAM,4CAA4C,CAAC;AACxF,OAAO,EAAE,UAAU,EAAE,MAAM,SAAS,CAAC;;IAOjC,mCACW,SAA0B,EAC1B,SAAiB;QADjB,cAAS,GAAT,SAAS,CAAiB;QAC1B,cAAS,GAAT,SAAS,CAAQ;KACxB;IAEG,2CAAO,GAAd,UAAe,OAAe,EAAE,UAAkB;QAAlD,iBAYC;QAXG,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,QAAQ;YAC9B,KAAI,CAAC,cAAc,GAAG,KAAI,CAAC,SAAS,CAAC,MAAM,CAAC,0BAA0B,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;YAC5H,KAAI,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC,IAAI,CAC9B;gBACI,QAAQ,CAAC,IAAI,EAAE,CAAC;gBAChB,QAAQ,CAAC,QAAQ,EAAE,CAAC;aACvB,CACJ,CAAC,KAAK,CACH,UAAC,GAAG,IAAK,OAAA,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,EAAnB,CAAmB,CAC/B,CAAC;SACL,CAAC,CAAC;KACN;IAEM,gDAAY,GAAnB,UAAoB,OAAe;QAC/B,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,eAAe,EAAE,EAAC,OAAO,EAAE,OAAO,EAAC,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;KAC3E;IAEM,2CAAO,GAAd;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAA,CAAC;YACrB,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC;SACjC;KACJ;;gBAhCJ,UAAU;;;;gBAJF,eAAe;gBAAS,MAAM;;oCADvC;;SAMa,yBAAyB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { ModalController, Modal, Events } from 'ionic-angular';\nimport { SimpleProgressBarComponent } from '../../components/progress-bar/progress-bar';\nimport { Observable } from 'rxjs/Rx';\n\n@Injectable()\nexport class SimpleProgressBarProvider {\n\n    protected _profile_modal: Modal;\n\n    constructor(\n        public modalCtrl: ModalController,\n        public eventCtrl: Events,\n    ) {}\n\n    public present(message: string, milestones: number) : Observable<void>{\n        return Observable.create((observer) => {\n            this._profile_modal = this.modalCtrl.create(SimpleProgressBarComponent, { message: message, total: milestones, actual: 0 });\n            this._profile_modal.present().then(\n                () => {                \n                    observer.next();\n                    observer.complete();\n                }            \n            ).catch(\n                (err) => observer.error(err)\n            );\n        });\n    }\n\n    public setMilestone(message: string){\n        this.eventCtrl.publish('milestone:add', {message: message}, Date.now());\n    }\n\n    public dismiss(){\n        if (this._profile_modal){\n            this._profile_modal.dismiss();\n        }\n    }\n}\n"]}